name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        backend: 
          - vulkan
          - ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest' && 'cuda' }}
          - ${{ matrix.os == 'ubuntu-latest' && 'hipblas' }}
          - ${{ matrix.os == 'macos-latest' && 'metal' }}
        exclude:
          - os: macos-latest
            backend: cuda
          - os: windows-latest
            backend: hipblas
          - os: ubuntu-latest
            backend: metal
          - os: windows-latest
            backend: hipblas
          - os: macos-latest
            backend: hipblas

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions/setup-rust@v1
        with:
          rust-version: stable
          component: rustfmt

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libvulkan1
          # Add additional dependencies based on backend

      - name: Build with specified backend
        run: |
          cargo build --release --features ${{ matrix.backend }}
        if: matrix.backend != ''

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: audio-transcriber-${{ matrix.os }}-${{ matrix.backend }}
          path: target/release/audio-transcriber

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/audio-transcriber
          asset_name: audio-transcriber-${{ matrix.os }}-${{ matrix.backend }}.zip
          asset_content_type: application/zip
